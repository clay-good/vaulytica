"""
Test Vulnerability Management Agent

Tests the vulnerability management agent with various scenarios:
- Vulnerability enrichment
- SBOM analysis
- Remediation plan generation
- Jira ticket enrichment
"""

import asyncio
import pytest
from datetime import datetime
from vaulytica.config import VaulyticaConfig
from vaulytica.agents.vulnerability_management import VulnerabilityManagementAgent
from vaulytica.agents.framework import AgentInput, AgentContext


@pytest.fixture
def config():
    """Create test configuration"""
    return VaulyticaConfig(
        anthropic_api_key="sk-ant-test-key",  # Replace with real key for actual testing
        jira_url="https://your-company.atlassian.net",
        jira_username="user@example.com",
        jira_api_token="test-token",
        jira_project_key="SEC"
    )


@pytest.fixture
def vuln_agent(config):
    """Create Vulnerability Management Agent"""
    return VulnerabilityManagementAgent(config)


@pytest.fixture
def critical_vulnerability_context():
    """Create context for critical vulnerability"""
    return AgentContext(
        incident_id="vuln-001",
        severity="critical",
        data_sources={
            "vulnerability": {
                "vulnerability_id": "VULN-2024-001",
                "cve_id": "CVE-2024-12345",
                "package_name": "lodash",
                "package_version": "4.17.20",
                "severity": "critical",
                "cvss_score": 9.8,
                "description": "Prototype pollution vulnerability in lodash",
                "affected_asset_id": "container-abc123",
                "affected_asset_name": "api-gateway",
                "source": "wiz",
                "discovered_at": datetime.utcnow().isoformat()
            },
            "sbom": {
                "name": "api-gateway",
                "version": "1.0.0",
                "dependencies": [
                    {
                        "name": "express",
                        "version": "4.17.1",
                        "dependencies": [
                            {
                                "name": "lodash",
                                "version": "4.17.20"
                            }
                        ]
                    },
                    {
                        "name": "axios",
                        "version": "0.21.1"
                    }
                ],
                "vulnerabilities": [
                    {
                        "cve": "CVE-2024-12345",
                        "package": "lodash@4.17.20"
                    }
                ]
            }
        }
    )


@pytest.fixture
def direct_dependency_context():
    """Create context for direct dependency vulnerability"""
    return AgentContext(
        incident_id="vuln-002",
        severity="high",
        data_sources={
            "vulnerability": {
                "vulnerability_id": "VULN-2024-002",
                "cve_id": "CVE-2024-67890",
                "package_name": "axios",
                "package_version": "0.21.1",
                "severity": "high",
                "cvss_score": 7.5,
                "description": "SSRF vulnerability in axios",
                "affected_asset_id": "container-xyz789",
                "affected_asset_name": "payment-service",
                "source": "socketdev"
            },
            "sbom": {
                "name": "payment-service",
                "version": "2.0.0",
                "dependencies": [
                    {
                        "name": "axios",
                        "version": "0.21.1"
                    },
                    {
                        "name": "stripe",
                        "version": "8.0.0"
                    }
                ]
            }
        }
    )


@pytest.mark.asyncio
async def test_enrich_vulnerability(vuln_agent, critical_vulnerability_context):
    """Test vulnerability enrichment"""
    print("\n=== Testing Vulnerability Enrichment ===")

    agent_input = AgentInput(
        task="enrich_vulnerability",
        context=critical_vulnerability_context
    )

    result = await vuln_agent.execute(agent_input)

    # Verify enrichment
    assert result.status.value == "completed"
    assert "enrichment" in result.results

    enrichment = result.results["enrichment"]
    print(f"\nEnrichment Results:")
    print(f"  Vulnerability ID: {enrichment['vulnerability_id']}")
    print(f"  CVE: {enrichment['cve_id']}")
    print(f"  Package: {enrichment['package']}")
    print(f"  Severity: {enrichment['severity']}")
    print(f"  Risk Score: {enrichment['risk_score']:.1f}/10.0")
    print(f"  Priority: {enrichment['priority']}")
    print(f"  Team: {enrichment['ownership']['team']}")

    assert enrichment["vulnerability_id"] == "VULN-2024-001"
    assert enrichment["cve_id"] == "CVE-2024-12345"
    assert enrichment["risk_score"] > 0

    print("\n✓ Vulnerability enrichment working correctly")


@pytest.mark.asyncio
async def test_analyze_sbom(vuln_agent, critical_vulnerability_context):
    """Test SBOM analysis"""
    print("\n=== Testing SBOM Analysis ===")

    agent_input = AgentInput(
        task="analyze_sbom",
        context=critical_vulnerability_context
    )

    result = await vuln_agent.execute(agent_input)

    # Verify SBOM analysis
    assert result.status.value == "completed"
    assert "sbom_analysis" in result.results

    analysis = result.results["sbom_analysis"]
    print(f"\nSBOM Analysis Results:")
    print(f"  Vulnerable Package: {analysis['vulnerable_package']}")
    print(f"  Dependency Path: {' → '.join(analysis['dependency_path'])}")
    print(f"  Depth: {analysis['depth']}")
    print(f"  Direct Dependency: {analysis['direct_dependency']}")
    print(f"  Is Direct: {analysis['is_direct']}")
    print(f"  Total Dependencies: {analysis['total_dependencies']}")

    assert analysis["vulnerable_package"] == "lodash@4.17.20"
    assert analysis["depth"] > 0
    assert analysis["direct_dependency"] is not None

    print("\n✓ SBOM analysis working correctly")


@pytest.mark.asyncio
async def test_create_remediation_plan(vuln_agent, critical_vulnerability_context):
    """Test remediation plan creation"""
    print("\n=== Testing Remediation Plan Creation ===")

    agent_input = AgentInput(
        task="create_remediation_plan",
        context=critical_vulnerability_context
    )

    result = await vuln_agent.execute(agent_input)

    # Verify remediation plan
    assert result.status.value == "completed"
    assert "remediation_plan" in result.results

    plan = result.results["remediation_plan"]
    print(f"\nRemediation Plan:")
    print(f"  Action: {plan['action']}")
    print(f"  Description: {plan['description']}")
    print(f"  Direct Dependency: {plan.get('direct_dependency', 'N/A')}")
    print(f"  Estimated Effort: {plan['estimated_effort_hours']} hours")
    print(f"  Automated: {plan['automated']}")
    print(f"  Risk Level: {plan['risk_level']}")

    if plan.get("steps"):
        print(f"\n  Steps:")
        for step in plan["steps"]:
            print(f"    {step}")

    assert plan["action"] in ["update_dependency", "update_parent_dependency", "manual_review"]
    assert plan["estimated_effort_hours"] > 0

    print("\n✓ Remediation plan creation working correctly")


@pytest.mark.asyncio
async def test_direct_dependency_remediation(vuln_agent, direct_dependency_context):
    """Test remediation for direct dependency"""
    print("\n=== Testing Direct Dependency Remediation ===")

    agent_input = AgentInput(
        task="create_remediation_plan",
        context=direct_dependency_context
    )

    result = await vuln_agent.execute(agent_input)

    plan = result.results["remediation_plan"]
    print(f"\nDirect Dependency Remediation:")
    print(f"  Action: {plan['action']}")
    print(f"  Direct Dependency: {plan.get('direct_dependency', 'N/A')}")
    print(f"  Automated: {plan['automated']}")

    # Direct dependencies should have simpler remediation
    assert plan["action"] == "update_dependency"
    assert plan["automated"] == True

    print("\n✓ Direct dependency remediation working correctly")


@pytest.mark.asyncio
async def test_comprehensive_vulnerability_management(vuln_agent, critical_vulnerability_context):
    """Test comprehensive vulnerability management workflow"""
    print("\n=== Testing Comprehensive Vulnerability Management ===")

    agent_input = AgentInput(
        task="comprehensive_vulnerability_management",
        context=critical_vulnerability_context
    )

    result = await vuln_agent.execute(agent_input)

    # Verify all components
    assert result.status.value == "completed"
    assert "enrichment" in result.results
    assert "sbom_analysis" in result.results
    assert "remediation_plan" in result.results

    print(f"\nComprehensive Results:")
    print(f"  Status: {result.status.value}")
    print(f"  Confidence: {result.confidence}")
    print(f"  Execution Time: {result.execution_time:.2f}s")

    enrichment = result.results["enrichment"]
    print(f"\n  Enrichment:")
    print(f"    Risk Score: {enrichment['risk_score']:.1f}/10.0")
    print(f"    Priority: {enrichment['priority']}")

    sbom = result.results["sbom_analysis"]
    print(f"\n  SBOM Analysis:")
    print(f"    Dependency Path: {' → '.join(sbom['dependency_path'])}")
    print(f"    Depth: {sbom['depth']}")

    plan = result.results["remediation_plan"]
    print(f"\n  Remediation Plan:")
    print(f"    Action: {plan['action']}")
    print(f"    Estimated Effort: {plan['estimated_effort_hours']} hours")

    print(f"\n  Recommendations:")
    for rec in result.recommendations:
        print(f"    - {rec}")

    print(f"\n  Next Actions:")
    for action in result.next_actions:
        print(f"    - {action}")

    print("\n✓ Comprehensive vulnerability management working correctly")


@pytest.mark.asyncio
async def test_agent_statistics(vuln_agent, critical_vulnerability_context):
    """Test agent statistics tracking"""
    print("\n=== Testing Agent Statistics ===")

    # Process a vulnerability
    agent_input = AgentInput(
        task="comprehensive_vulnerability_management",
        context=critical_vulnerability_context
    )

    await vuln_agent.execute(agent_input)

    # Get statistics
    stats = vuln_agent.get_statistics()

    print(f"\nAgent Statistics:")
    print(f"  Vulnerabilities Processed: {stats['vulnerabilities_processed']}")
    print(f"  Vulnerabilities Enriched: {stats['vulnerabilities_enriched']}")
    print(f"  Remediation Plans Created: {stats['remediation_plans_created']}")
    print(f"  MRs Created: {stats['mrs_created']}")
    print(f"  Vulnerabilities Fixed: {stats['vulnerabilities_fixed']}")
    print(f"  Jira Tickets Enriched: {stats['jira_tickets_enriched']}")

    assert stats["vulnerabilities_processed"] > 0
    assert stats["vulnerabilities_enriched"] > 0
    assert stats["remediation_plans_created"] > 0

    print("\n✓ Agent statistics tracking working correctly")


if __name__ == "__main__":
    # Run tests manually
    print("Running Vulnerability Management Agent Tests...")
    print("=" * 80)

    # Create fixtures
    config = VaulyticaConfig(
        anthropic_api_key="sk-ant-test-key",  # Replace with real key
        jira_url="https://your-company.atlassian.net",
        jira_username="user@example.com",
        jira_api_token="test-token",
        jira_project_key="SEC"
    )

    agent = VulnerabilityManagementAgent(config)

    context = AgentContext(
        incident_id="vuln-test",
        severity="high",
        data_sources={
            "vulnerability": {
                "vulnerability_id": "TEST-001",
                "cve_id": "CVE-2024-TEST",
                "package_name": "test-package",
                "package_version": "1.0.0",
                "severity": "high",
                "cvss_score": 7.5,
                "description": "Test vulnerability"
            },
            "sbom": {
                "name": "test-app",
                "dependencies": []
            }
        }
    )

    # Run async test
    asyncio.run(test_comprehensive_vulnerability_management(agent, context))

